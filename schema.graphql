type Query{
    users: [User!]!
    user(id: ID!): User
    ledgers:[Ledger]!
    ledgersAfterDateTime(dateTime: String!): [Ledger]
    ledgersBeforeDateTime(dateTime: String!): [Ledger]
    ledgersBetweenDateTime(beginTime: String!, endTime: String! ): [Ledger]
}

type Mutation {
    createUser(userName: String!, firstName: String!, lastName: String!, email: String!, phoneNumber: String, password: String!): User!
    createOverUnder(value: Boolean!, overUnder: String!): OverUnder!
    createTeam(teamName:String!, city: String!): Team!
    createWagerType(wagerType: String!): WagerType!
    createSport(sportName: String!): Sport!
    createOddsType(oddsType: String!): OddsType!
    createOutcome(outcome: String!): Outcome!
    createGame(homeTeamName: String!, awayTeamName: String!, gameTime: String!, sportName: String!): Game!
    createOdd(homeTeamName: String!, awayTeamName: String!, gameTime: String!, moneyLine: Int, runLineOdds: Int, runLineRuns: Float, overUnderOdds: Int, overUnderRuns: Float ): Odd!
    createWager(ledgerId: ID!, oddsId: ID!, oddsType: String!, pickedOverUnder: String!, pickedTeam: String!): Wager!
    createLedger(amountWagered: Float!, wagerType: String!, userName: String!): Ledger!
    updateLedger(id: ID! collected: Float, payout:Float, outcome: String! ):[Ledger]!

}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    userName: String!
    password: String!
    email: String!
    phoneNumber: String
    balance: Float!
    userVerified: Boolean!
    ledgerEntries: [Ledger]
}

type Ledger {
    id: ID!
    amountWagered: Float!
    collected: Float
    payout: Float
    user: User!
    wagerType: WagerType!
    outcome: Outcome!
}

type Game {
    id: ID!
    homeTeam: Team!
    awayTeam: Team!
    gameTime: String!
    sport: Sport!
    odds: [Odd]!
}

type Odd {
    id: ID!
    game: Game!
    moneyLine: Int
    runLineOdds: Int
    runLineRuns: Float
    overUnderOdds: Int
    overUnderRuns: Float
    
}

type Wager {
    id: ID!
    ledger: Ledger!
    odds: Odd!
    oddsType: OddsType!
    pickedOverUnder: OverUnder
    pickedTeam: Team
}

type Outcome {
    id: ID!
    outcome: String!
    ledgers: [Ledger]!
}

type OddsType{
    id: ID!
    oddsType: String!
}

type Sport{
    id: ID!
    sportName: String!
    games: [Game]!
}

type WagerType {
    id: ID!
    wagerType: String!
    ledgers: [Ledger]!
}


type Team {
    id: ID! 
    teamName: String!
    city: String!
    homeGames: [Game]!
    awayGames: [Game]!
}

type OverUnder{
    id: ID!
    value: Boolean!
    overUnder: String!
}
